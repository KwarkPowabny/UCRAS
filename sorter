import numpy as np
import matplotlib.pyplot as plt

E=np.load('/Users/jakubscioch/Desktop/Hg_E_matrix_Fin.npy')
spins =  np.load('/Users/jakubscioch/Desktop/Hg_spin_tests_filesS.npy')
R_min = 600
R_max = 1800
NR = 3998
R = np.linspace(R_min, R_max, NR)
R_T=np.linspace(R_min, R_max, 3996)
R_spin=np.linspace(R_min, R_max, 800)
dr=(R[3997]-R[0])/len(R)
E_cut = []
NR = len(E[0])
spins_cut=[]

for i in range(len(E)-3):
    if np.abs(np.sum(np.array(E[i])) - NR*E[i][len(E[i])-5]) >1e-5:
        E_cut.append(E[i])
        spins_cut.append(spins[i])
        
E_cut = np.array(E_cut)
spins_cut=np.array(spins_cut)
derE2 = np.zeros((len(E_cut) , len(R)))
spins_ext = np.zeros((len(E_cut) , len(R)))

for i in range(len(spins_cut)):
    R_arr=np.array(R)
    R_spin_arr=np.array(R_spin)   
    spins_cut_arr=np.array(spins_cut[i])
    spins_interpolate=np.interp(R_arr,R_spin, spins_cut_arr)    
    spins_ext[i]=spins_interpolate
    
ik = int(len(E_cut))
E_sort = []
for p in range(ik):
    E_sort.append([])  

def F(x,k,j):
   
    for i in range(0,480,1)  :
        q=abs((E_cut[i][j]-2*E_sort[k][j-1]+E_sort[k][j-2])/dr)
        if q==x:
            y=(E_cut[i][j])         
            return float(y)  
        
def F1(x,k,j):
   
    for i in range(0,480,1)  :
        q=E_cut[i][j-1]
        if q==x:
                    
            return (i)        
        
        


for k in range(0,478,1) :
    print(k)
    
    for j in range(len(R)-2) :  
        
        if len(E_sort[k]) <3:  
            
            E_sort[k].append(E_cut[k][j])    
          
        else:
            w=F1(E_sort[k][j-1],k,j)
            b=derivative_up=abs((E_cut[w+1][j]-2*E_sort[k][j-1]+E_sort[k][j-2])/dr)
            a=derivative_0=abs((E_cut[w][j]-2*E_sort[k][j-1]+E_sort[k][j-2])/dr)
            c=derivative_down=abs((E_cut[w-1][j]-2*E_sort[k][j-1]+E_sort[k][j-2])/dr)                         
            f=min(a,b,c)
    
            if a==b==c or b==c or a==b or a==c :
                E_sort[k].append(E_cut[w][j])    
            else:   
                if f==a:
                    E_sort[k].append(E_cut[w][j])
                else:
                    if f==b:
                        E_sort[k].append(F(b,k,j))  
                        print('b',j,k)
                    else:
                        if f==c:
                            E_sort[k].append(F(c,k,j))     
                            print('c',j,k)

for i in range(len(E_cut)-3) :
    for j in range(len(R)-3):
        dE2=(E_sort[i][j+1]-E_sort[i][j])/(dr)
        derE2[i][j] = dE2  


    
for i in range(265,308,1):

    f, (ax1, ax2,ax3) = plt.subplots(3, 1, sharex=True)
    ax1.set_title('State'+str(i))
    ax1.set_ylabel('E(GHz)')
    ax2.set_ylabel('GHz/Bohr')
   # ax3.set_ylabel('Spin')
    plt.xlabel('R(Bohr)')
    
    ax1.scatter(R_T, E_sort[i-1],s=1,color='red',alpha=0.3)
    ax1.scatter(R_T, E_sort[i],s=1,color='blue',alpha=0.5)
    ax1.scatter(R_T, E_sort[i+1],s=1,color='green',alpha=0.3)
    #ax1.scatter(R_T, E_sort[i-2],s=1,color='black',alpha=0.5)
    #ax1.scatter(R_T, E_sort[i+2],s=1,color='purple',alpha=0.3)
    #ax1.set_ylim(-23.29,-23.26)
    
    ax2.scatter(R, derE2[i-1],s=1,color='red',alpha=0.3)
    ax2.scatter(R, derE2[i],s=1,color='blue',alpha=0.4)
    ax2.scatter(R,derE2[i+1],s=1,color='green',alpha=0.3)
   # ax2.scatter(R, derE2[i+2],s=1,color='black',alpha=0.4)
    #ax2.scatter(R,derE2[i-2],s=1,color='purple',alpha=0.3)
   # ax2.set_xlim(1200,1350)
    #ax2.set_ylim(-0.002,0.002)
    
    ax3.scatter(R, spins_ext[i-1],s=2,color='red',alpha=0.4)
    ax3.scatter(R, spins_ext[i],s=2,color='blue',alpha=0.4)
    ax3.scatter(R, spins_ext[i+1],s=2,color='green',alpha=0.4)
    #ax3.set_ylim(0.30,0.50)
   
    
    plt.show()
    f.savefig('All_Sort_HG_plot_' + str(i) + '.pdf')
    
